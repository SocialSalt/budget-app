// Code generated by MockGen. DO NOT EDIT.
// Source: data_access.go
//
// Generated by this command:
//
//	mockgen -source=data_access.go -destination=../../mocks/data_access.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/socialsalt/budget-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionDA is a mock of TransactionDA interface.
type MockTransactionDA struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionDAMockRecorder
	isgomock struct{}
}

// MockTransactionDAMockRecorder is the mock recorder for MockTransactionDA.
type MockTransactionDAMockRecorder struct {
	mock *MockTransactionDA
}

// NewMockTransactionDA creates a new mock instance.
func NewMockTransactionDA(ctrl *gomock.Controller) *MockTransactionDA {
	mock := &MockTransactionDA{ctrl: ctrl}
	mock.recorder = &MockTransactionDAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionDA) EXPECT() *MockTransactionDAMockRecorder {
	return m.recorder
}

// CreateTransactions mocks base method.
func (m *MockTransactionDA) CreateTransactions(ctx context.Context, transactions []model.Transaction) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactions", ctx, transactions)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactions indicates an expected call of CreateTransactions.
func (mr *MockTransactionDAMockRecorder) CreateTransactions(ctx, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactions", reflect.TypeOf((*MockTransactionDA)(nil).CreateTransactions), ctx, transactions)
}

// ListTransactions mocks base method.
func (m *MockTransactionDA) ListTransactions(ctx context.Context, filter model.TransactionFilter) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, filter)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockTransactionDAMockRecorder) ListTransactions(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockTransactionDA)(nil).ListTransactions), ctx, filter)
}
