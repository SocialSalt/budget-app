// Code generated by MockGen. DO NOT EDIT.
// Source: logic.go
//
// Generated by this command:
//
//	mockgen -source=logic.go -destination=../../mocks/logic.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/socialsalt/budget-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionLogic is a mock of TransactionLogic interface.
type MockTransactionLogic struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionLogicMockRecorder
	isgomock struct{}
}

// MockTransactionLogicMockRecorder is the mock recorder for MockTransactionLogic.
type MockTransactionLogicMockRecorder struct {
	mock *MockTransactionLogic
}

// NewMockTransactionLogic creates a new mock instance.
func NewMockTransactionLogic(ctrl *gomock.Controller) *MockTransactionLogic {
	mock := &MockTransactionLogic{ctrl: ctrl}
	mock.recorder = &MockTransactionLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionLogic) EXPECT() *MockTransactionLogicMockRecorder {
	return m.recorder
}

// CreateTransactionsFromCSV mocks base method.
func (m *MockTransactionLogic) CreateTransactionsFromCSV(ctx context.Context, filepath string) ([]model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionsFromCSV", ctx, filepath)
	ret0, _ := ret[0].([]model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionsFromCSV indicates an expected call of CreateTransactionsFromCSV.
func (mr *MockTransactionLogicMockRecorder) CreateTransactionsFromCSV(ctx, filepath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionsFromCSV", reflect.TypeOf((*MockTransactionLogic)(nil).CreateTransactionsFromCSV), ctx, filepath)
}
